import { db } from "./db.js";

export class ViewManager {
  constructor() {
    this.currentView = "today";
    this.currentWeekStart = null;
    this.currentMonth = new Date().getMonth();
    this.currentYear = new Date().getFullYear();

    this.init();
  }

  // –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  init() {
    console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ViewManager...");

    this.initNavigation();
    this.initNavigationArrows();
    this.setupEventListeners();
  }

  // === –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í–ö–õ–ê–î–û–ö ===

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  initNavigation() {
    const navButtons = document.querySelectorAll(".nav-button");

    if (navButtons.length === 0) {
      console.error("–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
      return;
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${navButtons.length} –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏`);

    navButtons.forEach((button, index) => {
      const view = button.dataset.view;

      if (!view) {
        console.warn(`–ö–Ω–æ–ø–∫–∞ ${index} –Ω–µ –∏–º–µ–µ—Ç data-view –∞—Ç—Ä–∏–±—É—Ç–∞`);
        return;
      }

      button.addEventListener("click", (e) => {
        e.preventDefault();
        console.log(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∏–¥: ${view}`);
        this.switchView(view);
      });

      // Accessibility: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      button.addEventListener("keydown", (e) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          this.switchView(view);
        }
      });
    });
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∏–¥–∞–º–∏
  async switchView(viewName) {
    console.log(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∏–¥: ${viewName}`);

    try {
      // 1. –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥—ã
      this.hideAllViews();

      // 2. –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
      this.deactivateAllNavButtons();

      // 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –≤–∏–¥
      const success = this.showView(viewName);

      if (!success) {
        console.error(`–í–∏–¥ ${viewName} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
        return;
      }

      // 4. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É
      this.activateNavButton(viewName);

      // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–∏–¥
      this.currentView = viewName;

      // 6. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–∞
      await this.loadViewData(viewName);

      console.log(`–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–∏–¥: ${viewName}`);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∏–¥ ${viewName}:`, error);
    }
  }

  // –°–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –≤–∏–¥–æ–≤
  hideAllViews() {
    const allViews = document.querySelectorAll("[data-view-content]");
    allViews.forEach((view) => {
      view.hidden = true;
      view.style.display = "none";
    });
  }

  // –ü–æ–∫–∞–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–∞
  showView(viewName) {
    const targetView = document.querySelector(
      `[data-view-content="${viewName}"]`
    );

    if (!targetView) {
      return false;
    }

    targetView.hidden = false;
    targetView.style.display = "block";
    return true;
  }

  // –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  deactivateAllNavButtons() {
    const allButtons = document.querySelectorAll(".nav-button");
    allButtons.forEach((btn) => {
      btn.classList.remove("active");
      btn.setAttribute("aria-selected", "false");
    });
  }

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  activateNavButton(viewName) {
    const activeButton = document.querySelector(`[data-view="${viewName}"]`);

    if (activeButton) {
      activeButton.classList.add("active");
      activeButton.setAttribute("aria-selected", "true");
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∏–¥–∞
  async loadViewData(viewName) {
    console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–¥–∞: ${viewName}`);

    try {
      switch (viewName) {
        case "today":
          await this.loadTodayView();
          break;
        case "week":
          await this.loadWeekView();
          break;
        case "month":
          await this.loadMonthView();
          break;
        case "year":
          await this.loadYearView();
          break;
        case "search":
          this.setupSearch();
          break;
        default:
          console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∏–¥: ${viewName}`);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–∞ ${viewName}:`, error);
      this.showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–¥–∞ "${viewName}"`);
    }
  }

  // === –í–ò–î "–°–ï–ì–û–î–ù–Ø" ===

  async loadTodayView() {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–∞ "–°–µ–≥–æ–¥–Ω—è"...');

    try {
      const todayNotes = await db.getTodayNotes();
      console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${todayNotes.length}`);

      const recentNotes = todayNotes.slice(0, 10);
      this.updateRecentNotesList(recentNotes);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –≤—á–µ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      if (typeof db.getYesterdayNotes === "function") {
        const yesterdayNotes = await db.getYesterdayNotes();
        if (yesterdayNotes.length > 0) {
          this.showYesterdayNotes(yesterdayNotes.slice(0, 5));
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–∞ "–°–µ–≥–æ–¥–Ω—è":', error);
      this.showError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è");
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
  updateRecentNotesList(notes) {
    const container = document.getElementById("recent-notes-list");

    if (!container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä recent-notes-list –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }

    if (notes.length === 0) {
      container.innerHTML = `
        <div class="empty-state">
          <p>üìù –ü–æ–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç</p>
          <p>–ù–∞—á–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å—Ç—Ä–∞–¥–∞–Ω–∏—è!</p>
        </div>
      `;
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
    const notesHTML = notes
      .map((note) => this.createNoteHTML(note, 200))
      .join("");

    container.innerHTML = `
      <div class="notes-header">
        <h4>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (${notes.length})</h4>
        <div class="export-buttons-group">
          <button class="export-button compact" id="export-today-btn" title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è">
            üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
          </button>
          <button class="download-button compact" id="download-today-btn" title="–°–∫–∞—á–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∫–∞–∫ .txt">
            üì• –°–∫–∞—á–∞—Ç—å
          </button>
        </div>
      </div>
      <div class="notes-list">
        ${notesHTML}
      </div>
    `;

    console.log(`–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ ${notes.length} –∑–∞–ø–∏—Å–µ–π`);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.attachTodayHandlers();
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–∏–¥–∞ "–°–µ–≥–æ–¥–Ω—è"
  attachTodayHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportTodayBtn = document.getElementById("export-today-btn");
    if (exportTodayBtn) {
      exportTodayBtn.addEventListener("click", async () => {
        exportTodayBtn.disabled = true;
        exportTodayBtn.textContent = "‚è≥";

        const result = await this.exportTodayNotes();
        this.showExportNotification(result, false);

        exportTodayBtn.disabled = false;
        exportTodayBtn.textContent = "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å";
      });
    }

    const downloadTodayBtn = document.getElementById("download-today-btn");
    if (downloadTodayBtn) {
      downloadTodayBtn.addEventListener("click", async () => {
        downloadTodayBtn.disabled = true;
        downloadTodayBtn.textContent = "‚è≥";

        const result = await this.downloadTodayNotes();
        this.showExportNotification(result, true);

        downloadTodayBtn.disabled = false;
        downloadTodayBtn.textContent = "üì• –°–∫–∞—á–∞—Ç—å";
      });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø–∏—Å—è–º–∏ (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π)
    const container = document.getElementById("recent-notes-list");
    if (!container) return;

    container.addEventListener("click", (e) => {
      const button = e.target.closest("button[data-note-id]");
      if (!button) return;

      const noteId = button.dataset.noteId;

      // –†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞
      if (button.classList.contains("expand-note-btn")) {
        this.expandNoteContent(noteId);
      }

      // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
      if (button.classList.contains("copy-btn")) {
        this.copyNoteToClipboard(parseInt(noteId, 10));
      }

      // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–±—É–¥—É—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
      if (button.classList.contains("edit-btn")) {
        this.editNote(parseInt(noteId, 10));
      }

      // –£–¥–∞–ª–µ–Ω–∏–µ
      if (button.classList.contains("delete-btn")) {
        this.deleteNote(parseInt(noteId, 10));
      }
    });
  }

  // –ú–µ—Ç–æ–¥ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–ø–∏—Å–∏
  expandNoteContent(noteId) {
    const noteContent = document.querySelector(
      `.note-item[data-note-id="${noteId}"] .note-content`
    );
    const contentText = noteContent?.querySelector(".content-text");
    const expandBtn = noteContent?.querySelector(".expand-note-btn");

    if (!noteContent || !contentText || !expandBtn) {
      console.error("–≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:", noteId);
      return;
    }

    const fullContent = noteContent.dataset.fullContent;

    if (fullContent) {
      // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –ø–æ–ª–Ω—ã–π
      contentText.innerHTML = fullContent;
      contentText.classList.remove("truncated");

      // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
      expandBtn.remove();

      console.log(`–†–∞—Å–∫—Ä—ã—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏ #${noteId}`);
    }
  }

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  async copyNoteToClipboard(noteId) {
    try {
      const note = await db.notes.get(noteId);

      if (!note) {
        console.error("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:", noteId);
        return;
      }

      const noteText = this.formatSingleNoteForCopy(note);
      const result = await this.copyToClipboard(noteText);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      this.showExportNotification(
        {
          success: result.success,
          count: 1,
          period: `–∑–∞–ø–∏—Å—å #${noteId}`,
          error: result.error,
        },
        false
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:", error);
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
  formatSingleNoteForCopy(note) {
    const date = new Date(note.date).toLocaleString("ru-RU");
    const tags = note.tags.length > 0 ? ` ${note.tags.join(" ")}` : "";

    return `üìù –ó–∞–ø–∏—Å—å #${note.id} –æ—Ç ${date}\n\n${note.content}${tags}`;
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
  async deleteNote(noteId) {
    const confirmMessage = `–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å #${noteId}?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!`;

    if (!confirm(confirmMessage)) {
      return;
    }

    try {
      await db.deleteNote(noteId);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–∏–¥
      await this.updateCurrentView();

      console.log(`–ó–∞–ø–∏—Å—å #${noteId} —É–¥–∞–ª–µ–Ω–∞`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const notification = document.createElement("div");
      notification.className = "export-notification success";
      notification.innerHTML = `
        <div class="notification-content">
          <span class="notification-icon">üóëÔ∏è</span>
          <div class="notification-text">
            <strong>–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞</strong>
            <p>–ó–∞–ø–∏—Å—å #${noteId} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.</p>
          </div>
        </div>
      `;
      document.body.appendChild(notification);
      setTimeout(() => notification.classList.add("show"), 10);
      setTimeout(() => {
        notification.classList.remove("show");
        setTimeout(() => {
          if (notification.parentNode) {
            document.body.removeChild(notification);
          }
        }, 300);
      }, 3000);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:", error);
      alert(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å #${noteId}: ${error.message}`);
    }
  }

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)
  async editNote(noteId) {
    console.log("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏:", noteId);
    alert(
      `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ #${noteId}\n\n–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.`
    );
  }

  // –ü–æ–∫–∞–∑ –∑–∞–ø–∏—Å–µ–π –∑–∞ –≤—á–µ—Ä–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
  showYesterdayNotes(notes) {
    const container = document.getElementById("recent-notes-list");

    if (!container || notes.length === 0) return;

    const yesterdayHTML = `
      <div class="yesterday-notes">
        <h4>–í—á–µ—Ä–∞ (${notes.length})</h4>
        <div class="notes-list">
          ${notes.map((note) => this.createNoteHTML(note)).join("")}
        </div>
      </div>
    `;

    container.insertAdjacentHTML("beforeend", yesterdayHTML);
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å —É–º–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
  createNoteHTML(note, maxLength = 200) {
    const date = new Date(note.date);
    const now = new Date();

    let timeString;
    if (this.isSameDay(date, now)) {
      timeString = date.toLocaleTimeString("ru-RU", {
        hour: "2-digit",
        minute: "2-digit",
      });
    } else {
      timeString = date.toLocaleString("ru-RU", {
        day: "2-digit",
        month: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
      });
    }

    const tagsHTML =
      note.tags.length > 0
        ? `<div class="note-tags">${note.tags.join(" ")}</div>`
        : "";

    // –£–º–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    const shouldTruncate = maxLength && note.content.length > maxLength;
    const displayContent = shouldTruncate
      ? note.content.substring(0, maxLength) + "..."
      : note.content;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ data-–∞—Ç—Ä–∏–±—É—Ç–µ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    const fullContentAttr = shouldTruncate
      ? `data-full-content="${this.escapeHtml(note.content)}"`
      : "";

    const expandButton = shouldTruncate
      ? `<button class="expand-note-btn" data-note-id="${note.id}" title="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</button>`
      : "";

    return `
      <div class="note-item" data-note-id="${
        note.id
      }" title="–ó–∞–ø–∏—Å—å –æ—Ç ${date.toLocaleString("ru-RU")}">
        <div class="note-header">
          <span class="note-time">${timeString}</span>
          <span class="note-id">#${note.id}</span>
          <div class="note-actions">
            <button class="note-action-btn copy-btn" data-note-id="${
              note.id
            }" title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å">üìã</button>
            <button class="note-action-btn edit-btn" data-note-id="${
              note.id
            }" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
            <button class="note-action-btn delete-btn" data-note-id="${
              note.id
            }" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
          </div>
        </div>
        <div class="note-content" ${fullContentAttr}>
          <div class="content-text ${
            shouldTruncate ? "truncated" : ""
          }" data-note-id="${note.id}">
            ${this.escapeHtml(displayContent)}
          </div>
          ${expandButton}
        </div>
        ${tagsHTML}
      </div>
    `;
  }

  // === –í–ò–î "–ù–ï–î–ï–õ–Ø" ===

  async loadWeekView() {
    console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞...");

    try {
      if (!this.currentWeekStart) {
        this.currentWeekStart = this.getWeekStart(new Date());
      }

      const notes = await db.getWeekNotes(this.currentWeekStart);
      console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: ${notes.length}`);

      this.updateWeekView(notes);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞:", error);
      this.showError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é");
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞
  updateWeekView(notes) {
    const container = document.getElementById("week-notes-list");
    const title = document.getElementById("week-title");

    if (!container || !title) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
      return;
    }
    const endDate = new Date(this.currentWeekStart);
    endDate.setDate(endDate.getDate() + 6);

    const startStr = this.currentWeekStart.toLocaleDateString("ru-RU", {
      day: "2-digit",
      month: "2-digit",
    });
    const endStr = endDate.toLocaleDateString("ru-RU", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    });

    title.textContent = `–ù–µ–¥–µ–ª—è ${startStr} ‚Äî ${endStr}`;

    if (notes.length === 0) {
      container.innerHTML = `
        <div class="empty-state">
          <p>üìÖ –ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç</p>
          <p>–í—Ä–µ–º—è –Ω–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å!</p>
        </div>
      `;
      return;
    }

    const notesByDay = this.groupNotesByDay(notes);
    const weekDays = this.getWeekDaysArray(this.currentWeekStart);

    const weekHTML = weekDays
      .map((day) => {
        const dateKey = day.date.toDateString();
        const dayNotes = notesByDay[dateKey] || [];
        return `
          <div class="week-day ${dayNotes.length > 0 ? "has-notes" : ""}">
            <div class="day-header">
              <h4>${day.name}</h4>
              <span class="day-date">${day.date.toLocaleDateString("ru-RU", {
                day: "2-digit",
                month: "2-digit",
              })}</span>
              ${
                dayNotes.length > 0
                  ? `<span class="notes-count">${dayNotes.length}</span>`
                  : ""
              }
            </div>
            <div class="day-notes">
              ${
                dayNotes.length > 0
                  ? dayNotes
                      .map((note) => this.createCompactNoteHTML(note))
                      .join("")
                  : '<p class="no-notes">–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç</p>'
              }
            </div>
          </div>
        `;
      })
      .join("");

    container.innerHTML = `
    <div class="week-controls">
      <div class="export-buttons-group">
        <button class="export-button" id="export-week-btn" title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞">
          üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ (${notes.length})
        </button>
        <button class="download-button" id="download-week-btn" title="–°–∫–∞—á–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é –∫–∞–∫ .txt —Ñ–∞–π–ª">
          üì• –°–∫–∞—á–∞—Ç—å .txt (${notes.length})
        </button>
      </div>
    </div>
    <div class="week-grid">
      ${weekHTML}
    </div>
    <div class="week-summary">
      <p>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: <strong>${notes.length}</strong></p>
      <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: <strong>${Object.keys(notesByDay).length}</strong></p>
    </div>
  `;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const exportBtn = document.getElementById("export-week-btn");
    if (exportBtn) {
      exportBtn.addEventListener("click", async () => {
        exportBtn.disabled = true;
        exportBtn.textContent = "‚è≥ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...";

        const result = await this.exportWeekNotes();
        this.showExportNotification(result, false);

        exportBtn.disabled = false;
        exportBtn.textContent = `üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ (${notes.length})`;
      });
    }

    const downloadBtn = document.getElementById("download-week-btn");
    if (downloadBtn) {
      downloadBtn.addEventListener("click", async () => {
        downloadBtn.disabled = true;
        downloadBtn.textContent = "‚è≥ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ...";

        const result = await this.downloadWeekNotes();
        this.showExportNotification(result, true);

        downloadBtn.disabled = false;
        downloadBtn.textContent = `üì• –°–∫–∞—á–∞—Ç—å .txt (${notes.length})`;
      });
    }
  }

  // === –í–ò–î "–ú–ï–°–Ø–¶" ===

  async loadMonthView() {
    console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –≤–∏–¥–∞...");

    try {
      const notes = await db.getMonthNotes(this.currentYear, this.currentMonth);
      console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ –º–µ—Å—è—Ü: ${notes.length}`);

      this.updateMonthView(notes);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –≤–∏–¥–∞:", error);
      this.showError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ –º–µ—Å—è—Ü");
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–≥–æ –≤–∏–¥–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º
  updateMonthView(notes) {
    const container = document.getElementById("month-calendar-grid");
    const title = document.getElementById("month-title");

    if (!container || !title) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –≤–∏–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
      return;
    }
    const monthNames = [
      "–Ø–Ω–≤–∞—Ä—å",
      "–§–µ–≤—Ä–∞–ª—å",
      "–ú–∞—Ä—Ç",
      "–ê–ø—Ä–µ–ª—å",
      "–ú–∞–π",
      "–ò—é–Ω—å",
      "–ò—é–ª—å",
      "–ê–≤–≥—É—Å—Ç",
      "–°–µ–Ω—Ç—è–±—Ä—å",
      "–û–∫—Ç—è–±—Ä—å",
      "–ù–æ—è–±—Ä—å",
      "–î–µ–∫–∞–±—Ä—å",
    ];

    title.textContent = `${monthNames[this.currentMonth]} ${this.currentYear}`;

    const firstDay = new Date(this.currentYear, this.currentMonth, 1);
    const lastDay = new Date(this.currentYear, this.currentMonth + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startDayOfWeek = firstDay.getDay() === 0 ? 6 : firstDay.getDay() - 1;

    const notesByDay = {};
    notes.forEach((note) => {
      const day = note.date.getDate();
      if (!notesByDay[day]) {
        notesByDay[day] = [];
      }
      notesByDay[day].push(note);
    });

    const monthControlsHTML = `
    <div class="month-controls">
      <div class="export-buttons-group">
        <button class="export-button" id="export-month-btn" title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –º–µ—Å—è—Ü –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞">
          üìã –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Å—è—Ü–∞ (${notes.length})
        </button>
        <button class="download-button" id="download-month-btn" title="–°–∫–∞—á–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –º–µ—Å—è—Ü –∫–∞–∫ .txt —Ñ–∞–π–ª">
          üì• –°–∫–∞—á–∞—Ç—å .txt (${notes.length})
        </button>
      </div>
    </div>
  `;

    container.parentElement.insertAdjacentHTML("afterbegin", monthControlsHTML);

    container.innerHTML = "";
    container.className = "month-calendar-grid";
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    const dayHeaders = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"];
    dayHeaders.forEach((dayName) => {
      const dayHeader = document.createElement("div");
      dayHeader.className = "calendar-day-header";
      dayHeader.textContent = dayName;
      container.appendChild(dayHeader);
    });

    // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞
    for (let i = 0; i < startDayOfWeek; i++) {
      const emptyDay = document.createElement("div");
      emptyDay.className = "calendar-day empty";
      container.appendChild(emptyDay);
    }

    // –î–Ω–∏ –º–µ—Å—è—Ü–∞
    const today = new Date();
    for (let day = 1; day <= daysInMonth; day++) {
      const dayElement = document.createElement("div");
      dayElement.className = "calendar-day";

      const dayNotesCount = notesByDay[day] ? notesByDay[day].length : 0;
      const isToday =
        this.currentYear === today.getFullYear() &&
        this.currentMonth === today.getMonth() &&
        day === today.getDate();

      let intensityClass = "";
      if (dayNotesCount > 0) {
        dayElement.classList.add("has-notes");
        if (dayNotesCount >= 5) intensityClass = "high-activity";
        else if (dayNotesCount >= 3) intensityClass = "medium-activity";
        else intensityClass = "low-activity";
        dayElement.classList.add(intensityClass);
      }

      if (isToday) {
        dayElement.classList.add("today");
      }

      dayElement.innerHTML = `
        <div class="day-number">${day}</div>
        ${
          dayNotesCount > 0
            ? `<div class="notes-indicator">${dayNotesCount}</div>`
            : ""
        }
      `;

      if (dayNotesCount > 0) {
        dayElement.style.cursor = "pointer";
        dayElement.addEventListener("click", () => {
          this.showDayNotesModal(
            this.currentYear,
            this.currentMonth,
            day,
            notesByDay[day]
          );
        });
      }

      container.appendChild(dayElement);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const exportMonthBtn = document.getElementById("export-month-btn");
    const downloadMonthBtn = document.getElementById("download-month-btn");

    if (exportMonthBtn) {
      exportMonthBtn.addEventListener("click", async () => {
        exportMonthBtn.disabled = true;
        exportMonthBtn.textContent = "‚è≥ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º...";

        const result = await this.exportMonthNotes();
        this.showExportNotification(result, false);

        exportMonthBtn.disabled = false;
        exportMonthBtn.textContent = `üìã –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Å—è—Ü–∞ (${notes.length})`;
      });
    }

    if (downloadMonthBtn) {
      downloadMonthBtn.addEventListener("click", async () => {
        downloadMonthBtn.disabled = true;
        downloadMonthBtn.textContent = "‚è≥ –°–∫–∞—á–∏–≤–∞–µ–º...";

        const result = await this.downloadMonthNotes();
        this.showExportNotification(result, true);

        downloadMonthBtn.disabled = false;
        downloadMonthBtn.textContent = `üì• –°–∫–∞—á–∞—Ç—å .txt (${notes.length})`;
      });
    }
  }

  // === –í–ò–î "–ì–û–î" ===

  async loadYearView() {
    console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ–¥–æ–≤–æ–≥–æ –≤–∏–¥–∞...");

    try {
      const stats = await db.getNotesStats(this.currentYear);
      console.log(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≥–æ–¥: ${stats.totalNotes} –∑–∞–ø–∏—Å–µ–π`);

      this.updateYearView(stats);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–¥–æ–≤–æ–≥–æ –≤–∏–¥–∞:", error);
      this.showError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –≥–æ–¥");
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–¥–æ–≤–æ–≥–æ –≤–∏–¥–∞
  updateYearView(stats) {
    const container = document.getElementById("year-calendar-grid");
    const title = document.querySelector("#year-view h2");

    if (!container || !title) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –≥–æ–¥–æ–≤–æ–≥–æ –≤–∏–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
      return;
    }

    title.textContent = `–ì–æ–¥–æ–≤–æ–π –∞—Ä—Ö–∏–≤ —Å—Ç—Ä–∞–¥–∞–Ω–∏–π ‚Äî ${this.currentYear}`;

    const yearControlsHTML = `
    <div class="year-controls">
      <div class="export-buttons-group">
        <button class="export-button" id="export-year-btn" title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –≥–æ–¥ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞">
          üìã –≠–∫—Å–ø–æ—Ä—Ç –≥–æ–¥–∞ (${stats.totalNotes})
        </button>
        <button class="download-button" id="download-year-btn" title="–°–∫–∞—á–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –≥–æ–¥ –∫–∞–∫ .txt —Ñ–∞–π–ª">
          üì• –°–∫–∞—á–∞—Ç—å .txt (${stats.totalNotes})
        </button>
      </div>
    </div>
  `;

    container.parentElement.insertAdjacentHTML("afterbegin", yearControlsHTML);

    container.innerHTML = "";
    container.className = "year-calendar-grid";

    const monthNames = [
      "–Ø–Ω–≤–∞—Ä—å",
      "–§–µ–≤—Ä–∞–ª—å",
      "–ú–∞—Ä—Ç",
      "–ê–ø—Ä–µ–ª—å",
      "–ú–∞–π",
      "–ò—é–Ω—å",
      "–ò—é–ª—å",
      "–ê–≤–≥—É—Å—Ç",
      "–°–µ–Ω—Ç—è–±—Ä—å",
      "–û–∫—Ç—è–±—Ä—å",
      "–ù–æ—è–±—Ä—å",
      "–î–µ–∫–∞–±—Ä—å",
    ];

    const maxNotesInMonth = Math.max(...Object.values(stats.monthlyStats), 1);

    monthNames.forEach((monthName, monthIndex) => {
      const notesCount = stats.monthlyStats[monthIndex] || 0;
      const intensity = notesCount / maxNotesInMonth;

      const monthElement = document.createElement("div");
      monthElement.className = "year-month";

      if (notesCount > 0) {
        monthElement.classList.add("has-notes");
        if (intensity >= 0.8) monthElement.classList.add("very-high-activity");
        else if (intensity >= 0.6) monthElement.classList.add("high-activity");
        else if (intensity >= 0.4)
          monthElement.classList.add("medium-activity");
        else monthElement.classList.add("low-activity");
      }

      monthElement.innerHTML = `
        <div class="month-header">
          <span class="month-name">${monthName}</span>
          <span class="month-number">${monthIndex + 1}</span>
        </div>
        <div class="month-count">${notesCount}</div>
        <div class="month-bar">
          <div class="month-bar-fill" style="width: ${intensity * 100}%"></div>
        </div>
      `;

      monthElement.style.cursor = "pointer";
      monthElement.addEventListener("click", () => {
        this.currentMonth = monthIndex;
        this.switchView("month");
      });

      monthElement.title = `${monthName} ${this.currentYear}: ${notesCount} –∑–∞–ø–∏—Å–µ–π`;

      container.appendChild(monthElement);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–æ–¥–∞
    const exportYearBtn = document.getElementById("export-year-btn");
    const downloadYearBtn = document.getElementById("download-year-btn");

    if (exportYearBtn) {
      exportYearBtn.addEventListener("click", async () => {
        exportYearBtn.disabled = true;
        exportYearBtn.textContent = "‚è≥ –°–æ–±–∏—Ä–∞–µ–º –∞—Ä—Ö–∏–≤...";

        const result = await this.exportYearNotes();
        this.showExportNotification(result, false);

        exportYearBtn.disabled = false;
        exportYearBtn.textContent = `üìã –≠–∫—Å–ø–æ—Ä—Ç –≥–æ–¥–∞ (${stats.totalNotes})`;
      });
    }

    if (downloadYearBtn) {
      downloadYearBtn.addEventListener("click", async () => {
        downloadYearBtn.disabled = true;
        downloadYearBtn.textContent = "‚è≥ –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤...";

        const result = await this.downloadYearNotes();
        this.showExportNotification(result, true);

        downloadYearBtn.disabled = false;
        downloadYearBtn.textContent = `üì• –°–∫–∞—á–∞—Ç—å .txt (${stats.totalNotes})`;
      });
    }
  }

  // === –ü–û–ò–°–ö ===

  setupSearch() {
    console.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–∞...");

    const searchInput = document.getElementById("search-input");
    const searchResults = document.getElementById("search-results-list");
    const searchSuggestions = document.getElementById("search-suggestions");

    if (!searchInput || !searchResults) {
      console.error("–≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
      return;
    }

    let searchTimeout;
    let lastQuery = "";

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–∞
    this.showSearchSuggestions();

    // –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ —Å debounce (–∂–∏–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
    searchInput.addEventListener("input", (e) => {
      clearTimeout(searchTimeout);

      const query = e.target.value.trim();
      lastQuery = query;

      // –û—á–∏—â–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—á–∞—Ç–∞—Ç—å
      if (query.length > 0 && searchSuggestions) {
        searchSuggestions.innerHTML = "";
      }

      if (query.length === 0) {
        // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        this.showSearchSuggestions();
        searchResults.innerHTML = `
        <div class="search-placeholder">
          <p>üëÜ –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞</p>
          <p>–ü–æ–∏—Å–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –º–µ—Ä–µ –≤–≤–æ–¥–∞</p>
        </div>
      `;
        return;
      }

      if (query.length === 1) {
        searchResults.innerHTML = `
        <div class="search-placeholder">
          <p>–í–≤–µ–¥–∏—Ç–µ –µ—â—ë ${2 - query.length} —Å–∏–º–≤–æ–ª...</p>
        </div>
      `;
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      if (query.length >= 2) {
        searchResults.innerHTML = `
        <div class="search-loading">
          <p>üîç –ü–æ–∏—Å–∫ "${this.escapeHtml(query)}"...</p>
        </div>
      `;
      }

      // –î–µ–±–∞—É–Ω—Å - –∂–¥—ë–º 300–º—Å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–≤–æ–¥–∞
      searchTimeout = setTimeout(async () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –∑–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        if (query === lastQuery && query.length >= 2) {
          await this.performSearch(query);
        }
      }, 300);
    });

    // –ü–æ–∏—Å–∫ –ø–æ Enter –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    searchInput.addEventListener("keypress", async (e) => {
      if (e.key === "Enter") {
        clearTimeout(searchTimeout);
        const query = e.target.value.trim();
        if (query.length >= 2) {
          await this.performSearch(query);
        }
      }
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –ø—É—Å—Ç–æ–º –ø–æ–ª–µ
    searchInput.addEventListener("focus", () => {
      if (searchInput.value.length === 0) {
        this.showSearchSuggestions();
      }
    });

    // –û—á–∏—â–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
    searchInput.addEventListener("blur", () => {
      // –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É
      setTimeout(() => {
        if (searchInput.value.length === 0 && searchSuggestions) {
          searchSuggestions.innerHTML = "";
        }
      }, 200);
    });

    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
    searchInput.focus();
  }

  async performSearch(query) {
    const searchResults = document.getElementById("search-results-list");

    try {
      console.log(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫: "${query}"`);

      let results = [];

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
      if (query.startsWith("#")) {
        // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º
        const tagQuery = query.substring(1); // —É–±–∏—Ä–∞–µ–º #
        results = await db.searchByTags([tagQuery], false); // false = –ª—é–±–æ–π –∏–∑ —Ç–µ–≥–æ–≤
        console.log(
          `–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É "${tagQuery}": –Ω–∞–π–¥–µ–Ω–æ ${results.length} –∑–∞–ø–∏—Å–µ–π`
        );
      } else {
        // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
        results = await db.searchNotes(query, {
          searchInContent: true,
          searchInTags: true,
          caseSensitive: false,
          limit: 50,
        });
        console.log(
          `–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ "${query}": –Ω–∞–π–¥–µ–Ω–æ ${results.length} –∑–∞–ø–∏—Å–µ–π`
        );
      }

      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      this.displaySearchResults(results, query);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", error);
      searchResults.innerHTML = `
      <div class="search-error">
        <p>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞</p>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>
        <button onclick="location.reload()" class="retry-button">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
      </div>
    `;
    }
  }

  displaySearchResults(notes, query) {
    const searchResults = document.getElementById("search-results-list");

    if (notes.length === 0) {
      searchResults.innerHTML = `
      <div class="no-results">
        <h4>üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h4>
        <p>–ü–æ –∑–∞–ø—Ä–æ—Å—É <strong>"${this.escapeHtml(
          query
        )}"</strong> –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
        <div class="search-tips">
          <h5>üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</h5>
          <ul>
            <li>–£–ø—Ä–æ—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</li>
            <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è</li>
            <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</li>
            <li>–ü–æ–∏—Å–∫–∞—Ç—å –ø–æ —Ç–µ–≥–∞–º: <code>#—Ä–∞–±–æ—Ç–∞</code>, <code>#–ø—Ä–æ–µ–∫—Ç</code></li>
          </ul>
        </div>
      </div>
    `;
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–Ω—è–º –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    const resultsByDate = this.groupSearchResultsByDate(notes);

    const totalResults = notes.length;
    const resultsHeader = `
    <div class="search-results-header">
      <h4>‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${totalResults} –∑–∞–ø–∏—Å–µ–π</h4>
      <p>–ø–æ –∑–∞–ø—Ä–æ—Å—É <strong>"${this.escapeHtml(query)}"</strong></p>
      ${
        totalResults > 10
          ? "<p><small>–ü–æ–∫–∞–∑–∞–Ω—ã —Å–∞–º—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</small></p>"
          : ""
      }
    </div>
  `;

    const resultsHTML = Object.entries(resultsByDate)
      .sort(([dateA], [dateB]) => new Date(dateB) - new Date(dateA)) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ, –Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏
      .map(([dateString, dayNotes]) => {
        const date = new Date(dateString);
        const formattedDate = this.formatSearchDate(date);

        return `
        <div class="search-day-group">
          <h5 class="search-day-header">${formattedDate} (${
          dayNotes.length
        })</h5>
          <div class="search-day-results">
            ${dayNotes
              .map((note) => this.createSearchResultHTML(note, query))
              .join("")}
          </div>
        </div>
      `;
      })
      .join("");

    searchResults.innerHTML = resultsHeader + resultsHTML;

    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    searchResults.scrollIntoView({ behavior: "smooth", block: "start" });
  }

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ –¥–∞—Ç–∞–º
  groupSearchResultsByDate(notes) {
    const groups = {};

    notes.forEach((note) => {
      const dateKey = note.date.toDateString();
      if (!groups[dateKey]) {
        groups[dateKey] = [];
      }
      groups[dateKey].push(note);
    });

    return groups;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
  createSearchResultHTML(note, query = "") {
    const date = new Date(note.date);
    const timeString = date.toLocaleTimeString("ru-RU", {
      hour: "2-digit",
      minute: "2-digit",
    });

    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    let highlightedContent = this.escapeHtml(note.content);
    if (query && !query.startsWith("#")) {
      const regex = new RegExp(`(${this.escapeRegex(query)})`, "gi");
      highlightedContent = highlightedContent.replace(regex, "<mark>$1</mark>");
    }

    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
    let highlightedTags = note.tags.map((tag) => {
      if (
        query.startsWith("#") &&
        tag.toLowerCase().includes(query.substring(1).toLowerCase())
      ) {
        const tagRegex = new RegExp(
          `(${this.escapeRegex(query.substring(1))})`,
          "gi"
        );
        return tag.replace(tagRegex, "<mark>$1</mark>");
      }
      return tag;
    });

    const tagsHTML =
      highlightedTags.length > 0
        ? `<div class="search-result-tags">${highlightedTags.join(" ")}</div>`
        : "";

    return `
    <div class="search-result-item" data-note-id="${note.id}">
      <div class="search-result-header">
        <span class="search-result-time">${timeString}</span>
        <span class="search-result-id">#${note.id}</span>
      </div>
      <div class="search-result-content">${highlightedContent}</div>
      ${tagsHTML}
    </div>
  `;
  }

  // –ü–æ–∫–∞–∑ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
  async showSearchSuggestions() {
    const suggestionsContainer = document.getElementById("search-suggestions");

    if (!suggestionsContainer) return;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
      const popularTags = (await db.getPopularTags)
        ? await db.getPopularTags(8)
        : [];

      if (popularTags.length > 0) {
        const suggestionsHTML = `
        <div class="suggestions">
          <h5>üè∑Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏:</h5>
          <div class="tag-suggestions">
            ${popularTags
              .map(
                ({ tag, count }) =>
                  `<button class="tag-suggestion" data-tag="${tag}" title="${count} –∑–∞–ø–∏—Å–µ–π">
                ${tag} <span class="tag-count">(${count})</span>
              </button>`
              )
              .join("")}
          </div>
          <div class="search-examples">
            <h5>üí° –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞:</h5>
            <div class="example-queries">
              <button class="example-query" data-query="–≤—Å—Ç—Ä–µ—á–∞">–≤—Å—Ç—Ä–µ—á–∞</button>
              <button class="example-query" data-query="#–±–∞–≥">#–±–∞–≥</button>
              <button class="example-query" data-query="–ø—Ä–æ–µ–∫—Ç">–ø—Ä–æ–µ–∫—Ç</button>
              <button class="example-query" data-query="#–≤–∞–∂–Ω–æ">#–≤–∞–∂–Ω–æ</button>
            </div>
          </div>
        </div>
      `;

        suggestionsContainer.innerHTML = suggestionsHTML;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–∞ –Ω–∞ —Ç–µ–≥–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã
        suggestionsContainer
          .querySelectorAll(".tag-suggestion")
          .forEach((tagEl) => {
            tagEl.addEventListener("click", (e) => {
              const tag =
                e.target.dataset.tag ||
                e.target.closest("[data-tag]").dataset.tag;
              const searchInput = document.getElementById("search-input");
              searchInput.value = tag;
              searchInput.focus();
              this.performSearch(tag);
            });
          });

        suggestionsContainer
          .querySelectorAll(".example-query")
          .forEach((exampleEl) => {
            exampleEl.addEventListener("click", (e) => {
              const query = e.target.dataset.query;
              const searchInput = document.getElementById("search-input");
              searchInput.value = query;
              searchInput.focus();
              this.performSearch(query);
            });
          });
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–≥–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        suggestionsContainer.innerHTML = `
        <div class="suggestions">
          <div class="search-examples">
            <h5>üí° –ö–∞–∫ –∏—Å–∫–∞—Ç—å:</h5>
            <ul>
              <li><strong>–ü–æ —Ç–µ–∫—Å—Ç—É:</strong> –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É</li>
              <li><strong>–ü–æ —Ç–µ–≥–∞–º:</strong> –Ω–∞—á–Ω–∏—Ç–µ —Å # (–Ω–∞–ø—Ä–∏–º–µ—Ä: #—Ä–∞–±–æ—Ç–∞)</li>
              <li><strong>–ü–æ–∏—Å–∫ –∂–∏–≤–æ–π:</strong> —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ –º–µ—Ä–µ –≤–≤–æ–¥–∞</li>
            </ul>
          </div>
        </div>
      `;
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫:", error);
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
  formatSearchDate(date) {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);

    if (date >= today) {
      return "üïí –°–µ–≥–æ–¥–Ω—è";
    } else if (date >= yesterday) {
      return "üìÖ –í—á–µ—Ä–∞";
    } else {
      const daysDiff = Math.floor((today - date) / (1000 * 60 * 60 * 24));
      if (daysDiff <= 7) {
        return `üìÜ ${daysDiff} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`;
      } else {
        return date.toLocaleDateString("ru-RU", {
          weekday: "long",
          day: "numeric",
          month: "long",
          year:
            date.getFullYear() !== now.getFullYear() ? "numeric" : undefined,
        });
      }
    }
  }

  // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
  escapeRegex(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }

  // === –ú–ï–¢–û–î–´ –≠–ö–°–ü–û–†–¢–ê –ò –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø ===

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —Å fallback
  async copyToClipboard(text) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ API [web:62]
      if (navigator.clipboard && navigator.clipboard.writeText) {
        await navigator.clipboard.writeText(text);
        return { success: true, method: "modern" };
      }

      // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ [web:64]
      if (
        document.queryCommandSupported &&
        document.queryCommandSupported("copy")
      ) {
        const textarea = document.createElement("textarea");
        textarea.value = text;
        textarea.style.position = "fixed";
        textarea.style.left = "-9999px";
        textarea.style.top = "-9999px";
        document.body.appendChild(textarea);

        textarea.focus();
        textarea.select();

        const successful = document.execCommand("copy");
        document.body.removeChild(textarea);

        if (successful) {
          return { success: true, method: "fallback" };
        }
      }

      throw new Error("Clipboard API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
      return { success: false, error: error.message };
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
  formatNotesForExport(notes, period = "") {
    if (!notes || notes.length === 0) {
      return `üìã –ê—Ä—Ö–∏–≤ –ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –í—Ä–µ–º–µ–Ω–∏ ${period}\n\n–ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`;
    }

    const header =
      `üìã –ê—Ä—Ö–∏–≤ –ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –í—Ä–µ–º–µ–Ω–∏ ${period}\n` +
      `–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString("ru-RU")}\n` +
      `–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${notes.length}\n` +
      `${"=".repeat(50)}\n\n`;

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–Ω—è–º
    const notesByDay = this.groupNotesByDay(notes);

    let formattedText = header;

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    const sortedDays = Object.keys(notesByDay).sort(
      (a, b) => new Date(b) - new Date(a)
    );

    sortedDays.forEach((dayString, dayIndex) => {
      const dayNotes = notesByDay[dayString];
      const date = new Date(dayString);

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è
      const dayHeader = `üìÖ ${date.toLocaleDateString("ru-RU", {
        weekday: "long",
        day: "numeric",
        month: "long",
        year: "numeric",
      })} (${dayNotes.length} –∑–∞–ø–∏—Å–µ–π)`;

      formattedText += `${dayHeader}\n${"-".repeat(40)}\n`;

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –¥–Ω—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      const sortedNotes = dayNotes.sort(
        (a, b) => new Date(a.date) - new Date(b.date)
      );

      sortedNotes.forEach((note, noteIndex) => {
        const time = note.date.toLocaleTimeString("ru-RU", {
          hour: "2-digit",
          minute: "2-digit",
        });

        const tags = note.tags.length > 0 ? ` ${note.tags.join(" ")}` : "";

        formattedText += `${noteIndex + 1}. [${time}] ${note.content}${tags}\n`;
      });

      formattedText += "\n";
    });

    const footer =
      `${"=".repeat(50)}\n` +
      `–°–æ–∑–¥–∞–Ω–æ –≤ –ê—Ä—Ö–∏–≤–µ –ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –í—Ä–µ–º–µ–Ω–∏\n` +
      `–í—Å–µ–≥–æ –¥–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: ${sortedDays.length}\n` +
      `–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${notes.length}`;

    formattedText += footer;

    return formattedText;
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  async exportTodayNotes() {
    try {
      const notes = await db.getTodayNotes();
      const today = new Date().toLocaleDateString("ru-RU", {
        day: "numeric",
        month: "long",
        year: "numeric",
      });

      const exportText = this.formatNotesForExport(notes, `- ${today}`);
      const result = await this.copyToClipboard(exportText);

      return {
        success: result.success,
        count: notes.length,
        period: "—Å–µ–≥–æ–¥–Ω—è",
        error: result.error,
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è:", error);
      return { success: false, error: error.message };
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é
  async exportWeekNotes() {
    try {
      if (!this.currentWeekStart) {
        this.currentWeekStart = this.getWeekStart(new Date());
      }

      const notes = await db.getWeekNotes(this.currentWeekStart);
      const endDate = new Date(this.currentWeekStart);
      endDate.setDate(endDate.getDate() + 6);

      const weekPeriod = `- –ù–µ–¥–µ–ª—è —Å ${this.currentWeekStart.toLocaleDateString(
        "ru-RU"
      )} –ø–æ ${endDate.toLocaleDateString("ru-RU")}`;
      const exportText = this.formatNotesForExport(notes, weekPeriod);
      const result = await this.copyToClipboard(exportText);

      return {
        success: result.success,
        count: notes.length,
        period: "–Ω–µ–¥–µ–ª—é",
        error: result.error,
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–ø–∏—Å–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é:", error);
      return { success: false, error: error.message };
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –º–µ—Å—è—Ü
  async exportMonthNotes() {
    try {
      const notes = await db.getMonthNotes(this.currentYear, this.currentMonth);

      const monthNames = [
        "—è–Ω–≤–∞—Ä—å",
        "—Ñ–µ–≤—Ä–∞–ª—å",
        "–º–∞—Ä—Ç",
        "–∞–ø—Ä–µ–ª—å",
        "–º–∞–π",
        "–∏—é–Ω—å",
        "–∏—é–ª—å",
        "–∞–≤–≥—É—Å—Ç",
        "—Å–µ–Ω—Ç—è–±—Ä—å",
        "–æ–∫—Ç—è–±—Ä—å",
        "–Ω–æ—è–±—Ä—å",
        "–¥–µ–∫–∞–±—Ä—å",
      ];

      const monthPeriod = `- ${monthNames[this.currentMonth]} ${
        this.currentYear
      }`;
      const exportText = this.formatNotesForExport(notes, monthPeriod);
      const result = await this.copyToClipboard(exportText);

      return {
        success: result.success,
        count: notes.length,
        period: "–º–µ—Å—è—Ü",
        error: result.error,
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–ø–∏—Å–µ–π –∑–∞ –º–µ—Å—è—Ü:", error);
      return { success: false, error: error.message };
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –≥–æ–¥
  async exportYearNotes() {
    try {
      const stats = await db.getNotesStats(this.currentYear);
      const yearPeriod = `- ${this.currentYear} –≥–æ–¥`;

      const exportText = this.formatNotesForExport(stats.allNotes, yearPeriod);
      const result = await this.copyToClipboard(exportText);

      return {
        success: result.success,
        count: stats.totalNotes,
        period: "–≥–æ–¥",
        error: result.error,
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–ø–∏—Å–µ–π –∑–∞ –≥–æ–¥:", error);
      return { success: false, error: error.message };
    }
  }

  // === –ú–ï–¢–û–î–´ –°–ö–ê–ß–ò–í–ê–ù–ò–Ø –§–ê–ô–õ–û–í ===

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Blob –∫–∞–∫ —Ñ–∞–π–ª–∞ [web:76]
  downloadBlob(blob, filename) {
    try {
      // –°–æ–∑–¥–∞—ë–º URL –¥–ª—è Blob –æ–±—ä–µ–∫—Ç–∞ [web:73]
      const blobUrl = URL.createObjectURL(blob);

      // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const link = document.createElement("a");
      link.href = blobUrl;
      link.download = filename;

      // –°–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
      link.style.display = "none";

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM, –∫–ª–∏–∫–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º
      document.body.appendChild(link);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º dispatchEvent –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ [web:76]
      link.dispatchEvent(
        new MouseEvent("click", {
          bubbles: true,
          cancelable: true,
          view: window,
        })
      );

      document.body.removeChild(link);

      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É [web:77]
      setTimeout(() => {
        URL.revokeObjectURL(blobUrl);
      }, 100);

      return { success: true };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:", error);
      return { success: false, error: error.message };
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞
  generateReportFilename(period, notes) {
    const now = new Date();
    const dateStr = now.toISOString().split("T")[0]; // YYYY-MM-DD
    const timeStr = now.toTimeString().split(" ")[0].replace(/:/g, "-"); // HH-MM-SS

    let periodStr = period.replace(/\s+/g, "_").replace(/[^\w\-_]/g, "");
    if (periodStr) {
      periodStr = `_${periodStr}`;
    }

    return `archive_report${periodStr}_${dateStr}_${timeStr}.txt`;
  }

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∫–∞–∫ .txt —Ñ–∞–π–ª–∞
  async downloadTodayNotes() {
    try {
      const notes = await db.getTodayNotes();
      const today = new Date().toLocaleDateString("ru-RU", {
        day: "numeric",
        month: "long",
        year: "numeric",
      });

      const reportText = this.formatNotesForExport(notes, `- ${today}`);
      const blob = new Blob([reportText], { type: "text/plain;charset=utf-8" });
      const filename = this.generateReportFilename("—Å–µ–≥–æ–¥–Ω—è", notes);

      const result = this.downloadBlob(blob, filename);

      return {
        success: result.success,
        count: notes.length,
        period: "—Å–µ–≥–æ–¥–Ω—è",
        filename: filename,
        error: result.error,
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è:", error);
      return { success: false, error: error.message };
    }
  }

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é –∫–∞–∫ .txt —Ñ–∞–π–ª–∞
  async downloadWeekNotes() {
    try {
      if (!this.currentWeekStart) {
        this.currentWeekStart = this.getWeekStart(new Date());
      }

      const notes = await db.getWeekNotes(this.currentWeekStart);
      const endDate = new Date(this.currentWeekStart);
      endDate.setDate(endDate.getDate() + 6);

      const weekPeriod = `- –ù–µ–¥–µ–ª—è —Å ${this.currentWeekStart.toLocaleDateString(
        "ru-RU"
      )} –ø–æ ${endDate.toLocaleDateString("ru-RU")}`;
      const reportText = this.formatNotesForExport(notes, weekPeriod);
      const blob = new Blob([reportText], { type: "text/plain;charset=utf-8" });
      const filename = this.generateReportFilename("–Ω–µ–¥–µ–ª—è", notes);

      const result = this.downloadBlob(blob, filename);

      return {
        success: result.success,
        count: notes.length,
        period: "–Ω–µ–¥–µ–ª—é",
        filename: filename,
        error: result.error,
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é:", error);
      return { success: false, error: error.message };
    }
  }

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∑–∞ –º–µ—Å—è—Ü –∫–∞–∫ .txt —Ñ–∞–π–ª–∞
  async downloadMonthNotes() {
    try {
      const notes = await db.getMonthNotes(this.currentYear, this.currentMonth);

      const monthNames = [
        "—è–Ω–≤–∞—Ä—å",
        "—Ñ–µ–≤—Ä–∞–ª—å",
        "–º–∞—Ä—Ç",
        "–∞–ø—Ä–µ–ª—å",
        "–º–∞–π",
        "–∏—é–Ω—å",
        "–∏—é–ª—å",
        "–∞–≤–≥—É—Å—Ç",
        "—Å–µ–Ω—Ç—è–±—Ä—å",
        "–æ–∫—Ç—è–±—Ä—å",
        "–Ω–æ—è–±—Ä—å",
        "–¥–µ–∫–∞–±—Ä—å",
      ];

      const monthPeriod = `- ${monthNames[this.currentMonth]} ${
        this.currentYear
      }`;
      const reportText = this.formatNotesForExport(notes, monthPeriod);
      const blob = new Blob([reportText], { type: "text/plain;charset=utf-8" });
      const filename = this.generateReportFilename(
        `${monthNames[this.currentMonth]}_${this.currentYear}`,
        notes
      );

      const result = this.downloadBlob(blob, filename);

      return {
        success: result.success,
        count: notes.length,
        period: "–º–µ—Å—è—Ü",
        filename: filename,
        error: result.error,
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∑–∞ –º–µ—Å—è—Ü:", error);
      return { success: false, error: error.message };
    }
  }

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∑–∞ –≥–æ–¥ –∫–∞–∫ .txt —Ñ–∞–π–ª–∞
  async downloadYearNotes() {
    try {
      const stats = await db.getNotesStats(this.currentYear);
      const yearPeriod = `- ${this.currentYear} –≥–æ–¥`;

      const reportText = this.formatNotesForExport(stats.allNotes, yearPeriod);
      const blob = new Blob([reportText], { type: "text/plain;charset=utf-8" });
      const filename = this.generateReportFilename(
        `${this.currentYear}_–≥–æ–¥`,
        stats.allNotes
      );

      const result = this.downloadBlob(blob, filename);

      return {
        success: result.success,
        count: stats.totalNotes,
        period: "–≥–æ–¥",
        filename: filename,
        error: result.error,
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∑–∞ –≥–æ–¥:", error);
      return { success: false, error: error.message };
    }
  }

  // –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  showExportNotification(result, isDownload = false) {
    const { success, count, period, filename, error } = result;

    const notification = document.createElement("div");
    notification.className = `export-notification ${
      success ? "success" : "error"
    }`;

    if (success) {
      notification.innerHTML = `
      <div class="notification-content">
        <span class="notification-icon">${isDownload ? "üì•" : "‚úÖ"}</span>
        <div class="notification-text">
          <strong>${isDownload ? "–§–∞–π–ª —Å–∫–∞—á–∞–Ω!" : "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!"}</strong>
          <p>${
            isDownload
              ? `–°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∞–π–ª —Å ${count} –∑–∞–ø–∏—Å—è–º–∏ –∑–∞ ${period}`
              : `–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ${count} –∑–∞–ø–∏—Å–µ–π –∑–∞ ${period} –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`
          }</p>
          ${filename ? `<p class="filename">üìÑ ${filename}</p>` : ""}
        </div>
      </div>
    `;
    } else {
      notification.innerHTML = `
      <div class="notification-content">
        <span class="notification-icon">‚ùå</span>
        <div class="notification-text">
          <strong>${
            isDownload ? "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è" : "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"
          }</strong>
          <p>${error || "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"}</p>
        </div>
      </div>
    `;
    }

    document.body.appendChild(notification);

    setTimeout(() => notification.classList.add("show"), 10);

    setTimeout(() => {
      notification.classList.remove("show");
      setTimeout(() => {
        if (notification.parentNode) {
          document.body.removeChild(notification);
        }
      }, 300);
    }, 5000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –¥–æ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

    notification.addEventListener("click", () => {
      notification.classList.remove("show");
      setTimeout(() => {
        if (notification.parentNode) {
          document.body.removeChild(notification);
        }
      }, 300);
    });
  }

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  showDayNotesModal(year, month, day, notes) {
    const date = new Date(year, month, day);
    const dateString = date.toLocaleDateString("ru-RU");

    let notesText = `–ó–∞–ø–∏—Å–∏ –∑–∞ ${dateString}:\n\n`;
    notes.forEach((note, index) => {
      const time = note.date.toLocaleTimeString("ru-RU", {
        hour: "2-digit",
        minute: "2-digit",
      });
      notesText += `${index + 1}. [${time}] ${note.content}\n`;
      if (note.tags.length > 0) {
        notesText += `   –¢–µ–≥–∏: ${note.tags.join(" ")}\n`;
      }
      notesText += "\n";
    });

    alert(notesText);
  }

  groupNotesByDay(notes) {
    const groups = {};
    notes.forEach((note) => {
      const day = note.date.toDateString();
      if (!groups[day]) {
        groups[day] = [];
      }
      groups[day].push(note);
    });
    return groups;
  }

  getWeekDaysArray(weekStart) {
    const days = [];
    const dayNames = [
      "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
      "–í—Ç–æ—Ä–Ω–∏–∫",
      "–°—Ä–µ–¥–∞",
      "–ß–µ—Ç–≤–µ—Ä–≥",
      "–ü—è—Ç–Ω–∏—Ü–∞",
      "–°—É–±–±–æ—Ç–∞",
      "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    ];

    for (let i = 0; i < 7; i++) {
      const date = new Date(weekStart);
      date.setDate(weekStart.getDate() + i);
      days.push({
        name: dayNames[i],
        date: date,
      });
    }
    return days;
  }

  createCompactNoteHTML(note) {
    const time = note.date.toLocaleTimeString("ru-RU", {
      hour: "2-digit",
      minute: "2-digit",
    });

    const shortContent =
      note.content.length > 100
        ? note.content.substring(0, 100) + "..."
        : note.content;

    return `
      <div class="compact-note" data-note-id="${note.id}">
        <span class="compact-time">${time}</span>
        <span class="compact-content">${this.escapeHtml(shortContent)}</span>
        ${
          note.tags.length > 0
            ? `<span class="compact-tags">${note.tags
                .slice(0, 2)
                .join(" ")}</span>`
            : ""
        }
      </div>
    `;
  }

  getMostActiveMonth(monthlyStats) {
    const monthNames = [
      "–Ø–Ω–≤–∞—Ä—å",
      "–§–µ–≤—Ä–∞–ª—å",
      "–ú–∞—Ä—Ç",
      "–ê–ø—Ä–µ–ª—å",
      "–ú–∞–π",
      "–ò—é–Ω—å",
      "–ò—é–ª—å",
      "–ê–≤–≥—É—Å—Ç",
      "–°–µ–Ω—Ç—è–±—Ä—å",
      "–û–∫—Ç—è–±—Ä—å",
      "–ù–æ—è–±—Ä—å",
      "–î–µ–∫–∞–±—Ä—å",
    ];

    let maxMonth = 0;
    let maxCount = 0;

    Object.entries(monthlyStats).forEach(([month, count]) => {
      if (count > maxCount) {
        maxCount = count;
        maxMonth = parseInt(month);
      }
    });

    return monthNames[maxMonth];
  }

  getWeekStart(date) {
    const d = new Date(date);
    const day = d.getDay();
    const diff = d.getDate() - day + (day === 0 ? -6 : 1);
    const weekStart = new Date(d.setDate(diff));
    weekStart.setHours(0, 0, 0, 0);
    return weekStart;
  }

  isSameDay(date1, date2) {
    return (
      date1.getFullYear() === date2.getFullYear() &&
      date1.getMonth() === date2.getMonth() &&
      date1.getDate() === date2.getDate()
    );
  }

  escapeHtml(text) {
    const div = document.createElement("div");
    div.textContent = text;
    return div.innerHTML;
  }

  showError(message) {
    console.error("ViewManager Error:", message);
    const activeView = document.querySelector(
      "[data-view-content]:not([hidden])"
    );
    if (activeView) {
      const errorHTML = `
        <div class="error-message">
          <p>‚ö†Ô∏è ${message}</p>
          <button onclick="location.reload()">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
        </div>
      `;
      activeView.innerHTML = errorHTML;
    }
  }

  async updateCurrentView() {
    await this.loadViewData(this.currentView);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–µ–ª–æ—á–µ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  initNavigationArrows() {
    const weekArrows = document.querySelectorAll("#week-view .nav-arrow");
    if (weekArrows.length >= 2) {
      weekArrows[0].addEventListener("click", () => this.navigateWeek(-1));
      weekArrows[1].addEventListener("click", () => this.navigateWeek(1));
    }

    const monthArrows = document.querySelectorAll("#month-view .nav-arrow");
    if (monthArrows.length >= 2) {
      monthArrows[0].addEventListener("click", () => this.navigateMonth(-1));
      monthArrows[1].addEventListener("click", () => this.navigateMonth(1));
    }
  }

  navigateWeek(direction) {
    if (!this.currentWeekStart) {
      this.currentWeekStart = this.getWeekStart(new Date());
    }

    this.currentWeekStart.setDate(
      this.currentWeekStart.getDate() + direction * 7
    );
    this.loadWeekView();
  }

  navigateMonth(direction) {
    this.currentMonth += direction;

    if (this.currentMonth < 0) {
      this.currentMonth = 11;
      this.currentYear--;
    } else if (this.currentMonth > 11) {
      this.currentMonth = 0;
      this.currentYear++;
    }

    this.loadMonthView();
  }

  setupEventListeners() {
    document.addEventListener("keydown", (e) => {
      if (e.ctrlKey || e.metaKey) {
        switch (e.key) {
          case "1":
            e.preventDefault();
            this.switchView("today");
            break;
          case "2":
            e.preventDefault();
            this.switchView("week");
            break;
          case "3":
            e.preventDefault();
            this.switchView("month");
            break;
          case "4":
            e.preventDefault();
            this.switchView("year");
            break;
          case "f":
            e.preventDefault();
            this.switchView("search");
            break;
        }
      }
    });

    console.log(
      "–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è: Ctrl+1-4 –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–æ–≤, Ctrl+F –¥–ª—è –ø–æ–∏—Å–∫–∞"
    );
  }
}
